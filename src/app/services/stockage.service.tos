import { Injectable, InjectionToken, Inject, getDebugNode } from '@angular/core';
import { ServiceBase } from './service-base.service';
import { Voiture } from '../models/voiture';
import { resolve } from 'q';
import { inject } from '@angular/core/testing';
//import $ from 'jquery/dist/jquery.min.js';

export const StockageServiceDbNameToken = new InjectionToken("StockageServiceDbNameToken");
@Injectable({
  providedIn: 'root'
})
export class StockageService extends ServiceBase {
  _bdd!: IDBDatabase;

  get bdd(): Promise<IDBDatabase> {
    if (this._bdd) return Promise.resolve(this._bdd);

    return new Promise((resolve, reject) => {
      var dbHandle = indexedDB.open("mabase", 1);
      dbHandle.onupgradeneeded = (event => {
        // Création de la base de données si elle n'existe pas encore.
        var db = event.target.result as IDBDatabase;
        var storeVoitures = db.createObjectStore("voitures", {keyPath: "id", autoIncrement: true});
        storeVoitures.createIndex("marque", ["marque", "modele"], {unique: false});
        this._bdd = db;
        resolve(db);
      });
      dbHandle.onsuccess(event) => {
        var db = (event.target as any).result as IDBDatabase;
        this._bdd = db;
        resolve(db);
      };
    });
  }
  constructor(@Inject(StockageServiceDbNameToken) public name: string) {
    super();
  }

  createVoiture(): Voiture {
    throw new Error("Mehod not implemented");
  }

  getVoiture(id: string): Promise<Voiture> {
    return new Promise((resolve, reject) => {
      this.bdd.then((bdd) => {
        var transaction = bdd.transaction("voitures", "readwrite");
        var requete = transaction.objectStore("voitures").get(id);
        requete.onsuccess = (e) => {
          resolve((e.target as any).result);
        };
        requete.onerror = (e) => {
          reject((e.target as any).result);
        };
      });
    });
  }

  deleteVoiture(id: string): Promise<Voiture> {
    return new Promise((resolve, reject) => {
      this.bdd.then((bdd) => {
        var transaction = bdd.transaction("voitures", "readonly");
        var requete = transaction.objectStore("voitures").delete(id);
        requete.onsuccess = (e) => {
          resolve((e.target as any).result);
        };
        requete.onerror = (e) => {
          reject((e.target as any).result);
        };
      });
    });
  }


  updateVoiture(voitureModifiee: Voiture): Promise<Voiture> {
    return this.gereIsBusy(new Promise((resolve, reject) => {
      this.bdd.then((bdd) => {
        var transaction = bdd.transaction("voitures");
        var recherchevoiture = transaction.objectStore("voitures").get(voitureModifiee.id);
        recherchevoiture.onsuccess(event) => {
          var voitureRecherchee = (event.target.result) as Voiture;
          if (voitureRecherchee) {
            transaction.objectStore("voitures").put(voitureModifiee);
          } else {
            transaction.objectStore("voitures").add(voitureModifiee);
          }
        }
        transaction.onerror = () => {
          reject(new Error("La transaction n'a pas abouti"));
        }
        transaction.oncomplete = () => {
          resolve(voitureModifiee);
        }
      }
    }));
  }

  getVoitures(): Promise<Voiture[]> {
    throw new Error("Mehod not implemented");
  }
}
